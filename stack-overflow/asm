	.file	"stack4.c"
	.comm	badfile,4,4
	.text
.globl get_ESP
	.type	get_ESP, @function
get_ESP:
	pushl	%ebp
	movl	%esp, %ebp
#APP
# 11 "stack4.c" 1
	movl %esp,%eax
# 0 "" 2
#NO_APP
	popl	%ebp
	ret
	.size	get_ESP, .-get_ESP
	.section	.rodata
.LC0:
	.string	"endereco da pilha: %p\n"
.LC1:
	.string	"arg         : %p | %x\n"
.LC2:
	.string	"i           : %p | %x\n"
.LC3:
	.string	"p badfile   : %p | %x\n"
.LC4:
	.string	"p buffer[%2d]: %p | %x\n"
.LC5:
	.string	"valores [%4d]: %p | %x\n"
.LC6:
	.string	"r"
.LC7:
	.string	"badfile"
	.align 4
.LC8:
	.string	"--------------------*********************------------"
.LC9:
	.string	"Copiou"
	.text
.globl bof
	.type	bof, @function
bof:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$36, %esp
	movl	%gs:20, %eax
	movl	%eax, -12(%ebp)
	xorl	%eax, %eax
	call	get_ESP
	movl	$.LC0, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	printf
	movl	8(%ebp), %edx
	movl	$.LC1, %eax
	movl	%edx, 8(%esp)
	leal	8(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	printf
	movl	-24(%ebp), %edx
	movl	$.LC2, %eax
	movl	%edx, 8(%esp)
	leal	-24(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	printf
	movl	badfile, %edx
	movl	$.LC3, %eax
	movl	%edx, 8(%esp)
	movl	$badfile, 4(%esp)
	movl	%eax, (%esp)
	call	printf
	movl	$0, -24(%ebp)
	jmp	.L4
.L5:
	movl	-24(%ebp), %eax
	movzbl	-20(%ebp,%eax), %eax
	movzbl	%al, %ebx
	movl	-24(%ebp), %eax
	movl	%eax, %edx
	leal	-20(%ebp), %eax
	addl	%edx, %eax
	movl	-24(%ebp), %ecx
	movl	$.LC4, %edx
	movl	%ebx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	printf
	movl	-24(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -24(%ebp)
.L4:
	movl	-24(%ebp), %eax
	cmpl	$7, %eax
	jle	.L5
	movl	$8, -24(%ebp)
	jmp	.L6
.L7:
	movl	-24(%ebp), %eax
	movzbl	-20(%ebp,%eax), %eax
	movzbl	%al, %ebx
	movl	-24(%ebp), %eax
	movl	%eax, %edx
	leal	-20(%ebp), %eax
	addl	%edx, %eax
	movl	-24(%ebp), %ecx
	movl	$.LC5, %edx
	movl	%ebx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	printf
	movl	-24(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -24(%ebp)
.L6:
	movl	-24(%ebp), %eax
	cmpl	$34, %eax
	jle	.L7
	movl	$.LC6, %edx
	movl	$.LC7, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	fopen
	movl	%eax, badfile
	movl	badfile, %eax
	movl	%eax, 12(%esp)
	movl	$1024, 8(%esp)
	movl	$1, 4(%esp)
	leal	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	fread
	movl	$.LC8, (%esp)
	call	puts
	movl	$0, -24(%ebp)
	jmp	.L8
.L9:
	movl	-24(%ebp), %eax
	movzbl	-20(%ebp,%eax), %eax
	movzbl	%al, %ebx
	movl	-24(%ebp), %eax
	movl	%eax, %edx
	leal	-20(%ebp), %eax
	addl	%edx, %eax
	movl	-24(%ebp), %ecx
	movl	$.LC4, %edx
	movl	%ebx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	printf
	movl	-24(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -24(%ebp)
.L8:
	movl	-24(%ebp), %eax
	cmpl	$7, %eax
	jle	.L9
	movl	$8, -24(%ebp)
	jmp	.L10
.L11:
	movl	-24(%ebp), %eax
	movzbl	-20(%ebp,%eax), %eax
	movzbl	%al, %ebx
	movl	-24(%ebp), %eax
	movl	%eax, %edx
	leal	-20(%ebp), %eax
	addl	%edx, %eax
	movl	-24(%ebp), %ecx
	movl	$.LC5, %edx
	movl	%ebx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	printf
	movl	-24(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -24(%ebp)
.L10:
	movl	-24(%ebp), %eax
	cmpl	$34, %eax
	jle	.L11
	movl	$.LC9, (%esp)
	call	puts
	movl	$1, %eax
	movl	-12(%ebp), %edx
	xorl	%gs:20, %edx
	je	.L13
	call	__stack_chk_fail
.L13:
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
	.size	bof, .-bof
	.section	.rodata
.LC10:
	.string	"desviou o caminho"
	.text
.globl print_overflow
	.type	print_overflow, @function
print_overflow:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp
	movl	$.LC10, (%esp)
	call	puts
	leave
	ret
	.size	print_overflow, .-print_overflow
	.section	.rodata
	.align 4
.LC11:
	.string	"endereco do print overflow: %p\n"
.LC12:
	.string	"endereco da pilha: %x \n"
.LC13:
	.string	"Not gonna do it!"
	.text
.globl main
	.type	main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp
	andl	$-16, %esp
	subl	$32, %esp
	movl	$.LC11, %eax
	movl	$print_overflow, 4(%esp)
	movl	%eax, (%esp)
	call	printf
	call	get_ESP
	movl	%eax, 28(%esp)
	movl	$.LC12, %eax
	movl	28(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	printf
	movl	$0, (%esp)
	call	bof
	movl	$.LC13, (%esp)
	call	puts
	movl	$1, %eax
	leave
	ret
	.size	main, .-main
	.ident	"GCC: (Ubuntu 4.4.3-4ubuntu5) 4.4.3"
	.section	.note.GNU-stack,"",@progbits
